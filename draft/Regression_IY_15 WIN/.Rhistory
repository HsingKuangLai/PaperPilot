for (X_var in X_vars) {
# Define the model formula
formula <- as.formula(paste0(gsub("_pos|_neg", "", Y_var), " ~ POST  * ", X_var, " + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year"))
# Filter data based on the condition (if applicable)
if (Y_var == "DA1_pos") {
temp_data <- data[data$DA1 > 0, ]
} else if (Y_var == "DA1_neg") {
temp_data <- data[data$DA1 < 0, ]
} else {
temp_data <- data
}
# Fit the model with the filtered data
model <- lm(formula, data = temp_data)
# Calculate clustered standard errors
robust_se <- sqrt(diag(vcovCL(model, type = "HC0", cluster = ~Key)))
# Store the model and its robust SE
models[[paste0(Y_var, "_", X_var)]] <- model
se_list[[paste0(Y_var, "_", X_var)]] <- robust_se
}
}
# Output all models in a single table
stargazer(models, type = "html",
se = se_list,
title = "AM-Regression Results with Clustered Standard Errors", out = "AM_POST.html")
# RM
#sink("RM.txt")
# Define the different values for Y and X
# Assuming 'data' is your dataframe and 'Key' is your clustering variable
models <- list() # To store lm models
se_list <- list() # To store robust SEs for each model
X_vars <- c("ABSDA","ABSDA1")
Y_vars <- c("ABCFO","ABPROD","ABEXP","RM","RM1","RM2")
for (Y_var in Y_vars) {
for (X_var in X_vars) {
# Define the model formula+ ", X_var, "
formula <- as.formula(paste0(Y_var, " ~ POST  * ", X_var, " + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year"))
# Fit the model
model <- lm(formula, data = data)
# Calculate clustered standard errors
robust_se <- sqrt(diag(vcovCL(model, type = "HC0", cluster = ~Key)))
# Store the model and its robust SE
models[[paste0(Y_var, "_", X_var)]] <- model
se_list[[paste0(Y_var, "_", X_var)]] <- robust_se
}
}
# Assuming you want to output all models in a single table
stargazer(models, type = "html",
se = se_list,
title = "RM-Regression Results with Clustered Standard Errors", out = "RM_POST.html")
library(sandwich)
library(lmtest)
library(MASS)
library(Matching)
library(rgenoud)
library(MatchIt)
library(dplyr)
library(knitr)
library(kableExtra)
# read CSV
data <- read.csv("Total.csv", na.strings = "#N/A")
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABCFO<-data$ABCFO*(-1)
data$ABEXP<-data$ABEXP*(-1)
data$RM<-data$ABCFO+data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<-data$ABPROD+data$ABEXP
data<-subset(data,data$Adopt==1)
######fisrt step######################### winsorizing
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$RPA<-as.double(data$RPA)-1
data$RPA_Ctd<-as.double(data$RPA_Ctd)-1
###second step mataching
data$ADJROA_sq<-data$ADJROA*data$ADJROA
# Define your Y and X
Y_vars <- c("ABSDA1","RM")
X_vars <- c("ABSDA1","RM")
ps_models<-list()
models <- list() # To store lm models
se_list <- list() # To store robust SEs for each model
for (Y_var in Y_vars) {
for (X_var in X_vars) {
if (substr(Y_var,1,3)!=substr(X_var,1,3)) {
# 1. Generate propensity scores
ps_model <- glm(as.formula(paste0("POST ~ ", X_var, "  + LEV + OCF + MTB + ADJROA + ADJROA_sq + LGTA + Age + RD + ESG  + Big4 + Year")), data = data)
# 2. Perform nearest neighbor matching
matched_data <- matchit(as.formula(paste0("POST ~ ", X_var, "  + LEV + OCF + MTB + ADJROA+ ADJROA_sq  + LGTA + Age  + RD   + ESG  + Big4 + Year")), data = data,link="logit",method = "nearest",distance = "glm")
matched_data <- match.data(matched_data)
# 3. Fit a linear model on the matched data
model_formula <- as.formula(paste0(Y_var, " ~ POST * ", X_var, " + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age  + RD   + ESG  + Big4 + Year "))
model <- lm(model_formula, data = matched_data)
# Calculate clustered standard errors
robust_se <- sqrt(diag(vcovCL(model, type = "HC0", cluster = ~Key)))
# Output matched_data to CSV
csv_filename <- paste0("matched_data_", Y_var, "_", X_var, ".csv")
#write.csv(matched_data, file = csv_filename, row.names = FALSE)
# Store the model, its robust SE
models[[paste0(Y_var, "_", X_var)]] <- model
se_list[[paste0(Y_var, "_", X_var)]] <- robust_se
ps_models[[paste0(Y_var, "_", X_var)]]<-ps_model
}
}
}
library(sandwich)
library(lmtest)
library(MASS)
library(Matching)
library(rgenoud)
library(MatchIt)
library(dplyr)
library(knitr)
library(kableExtra)
# read CSV
data <- read.csv("Total.csv", na.strings = "#N/A")
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABCFO<-data$ABCFO*(-1)
data$ABEXP<-data$ABEXP*(-1)
data$RM<-data$ABCFO+data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<-data$ABPROD+data$ABEXP
data<-subset(data,data$Adopt==1)
######fisrt step######################### winsorizing
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$RPA<-as.double(data$RPA)-1
data$RPA_Ctd<-as.double(data$RPA_Ctd)-1
data$POST<-as.double(data$POST)-1
###second step mataching
data$ADJROA_sq<-data$ADJROA*data$ADJROA
# Define your Y and X
Y_vars <- c("ABSDA1","RM")
X_vars <- c("ABSDA1","RM")
ps_models<-list()
models <- list() # To store lm models
se_list <- list() # To store robust SEs for each model
for (Y_var in Y_vars) {
for (X_var in X_vars) {
if (substr(Y_var,1,3)!=substr(X_var,1,3)) {
# 1. Generate propensity scores
ps_model <- glm(as.formula(paste0("POST ~ ", X_var, "  + LEV + OCF + MTB + ADJROA + ADJROA_sq + LGTA + Age + RD + ESG  + Big4 + Year")), data = data)
# 2. Perform nearest neighbor matching
matched_data <- matchit(as.formula(paste0("POST ~ ", X_var, "  + LEV + OCF + MTB + ADJROA+ ADJROA_sq  + LGTA + Age  + RD   + ESG  + Big4 + Year")), data = data,link="logit",method = "nearest",distance = "glm")
matched_data <- match.data(matched_data)
# 3. Fit a linear model on the matched data
model_formula <- as.formula(paste0(Y_var, " ~ POST * ", X_var, " + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age  + RD   + ESG  + Big4 + Year "))
model <- lm(model_formula, data = matched_data)
# Calculate clustered standard errors
robust_se <- sqrt(diag(vcovCL(model, type = "HC0", cluster = ~Key)))
# Output matched_data to CSV
csv_filename <- paste0("matched_data_", Y_var, "_", X_var, ".csv")
#write.csv(matched_data, file = csv_filename, row.names = FALSE)
# Store the model, its robust SE
models[[paste0(Y_var, "_", X_var)]] <- model
se_list[[paste0(Y_var, "_", X_var)]] <- robust_se
ps_models[[paste0(Y_var, "_", X_var)]]<-ps_model
}
}
}
# Output all models in a single table using stargazer
stargazer::stargazer(models, type = "html", out = "PSM_POST.html", report=("vc*sp"), single.row = TRUE,
se = se_list, title = "PSM-Regression Results with Clustered Standard Errors")
library(sandwich)
library(lmtest)
library(MASS)
library(Matching)
library(rgenoud)
library(MatchIt)
library(dplyr)
library(knitr)
library(kableExtra)
# read CSV
data <- read.csv("Total.csv", na.strings = "#N/A")
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABCFO<-data$ABCFO*(-1)
data$ABEXP<-data$ABEXP*(-1)
data$RM<-data$ABCFO+data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<-data$ABPROD+data$ABEXP
data<-subset(data,data$Adopt==1)
######fisrt step######################### winsorizing
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$RPA<-as.double(data$RPA)-1
data$RPA_Ctd<-as.double(data$RPA_Ctd)-1
data$POST<-as.double(data$POST)-1
###second step mataching
data$ADJROA_sq<-data$ADJROA*data$ADJROA
# Define your Y and X
Y_vars <- c("ABSDA","RM","RM1","RM2")
X_vars <- c("ABSDA","RM")
ps_models<-list()
models <- list() # To store lm models
se_list <- list() # To store robust SEs for each model
for (Y_var in Y_vars) {
for (X_var in X_vars) {
if (substr(Y_var,1,2)!=substr(X_var,1,2)) {
# 1. Generate propensity scores
ps_model <- glm(as.formula(paste0("POST ~ ", X_var, "  + LEV + OCF + MTB + ADJROA + ADJROA_sq + LGTA + Age + RD + ESG  + Big4 + Year")), data = data)
# 2. Perform nearest neighbor matching
matched_data <- matchit(as.formula(paste0("POST ~ ", X_var, "  + LEV + OCF + MTB + ADJROA+ ADJROA_sq  + LGTA + Age  + RD   + ESG  + Big4 + Year")), data = data,link="logit",method = "nearest",distance = "glm")
matched_data <- match.data(matched_data)
# 3. Fit a linear model on the matched data
model_formula <- as.formula(paste0(Y_var, " ~ POST * ", X_var, " + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age  + RD   + ESG  + Big4 + Year "))
model <- lm(model_formula, data = matched_data)
# Calculate clustered standard errors
robust_se <- sqrt(diag(vcovCL(model, type = "HC0", cluster = ~Key)))
# Output matched_data to CSV
csv_filename <- paste0("matched_data_", Y_var, "_", X_var, ".csv")
#write.csv(matched_data, file = csv_filename, row.names = FALSE)
# Store the model, its robust SE
models[[paste0(Y_var, "_", X_var)]] <- model
se_list[[paste0(Y_var, "_", X_var)]] <- robust_se
ps_models[[paste0(Y_var, "_", X_var)]]<-ps_model
}
}
}
# Output all models in a single table using stargazer
stargazer::stargazer(models, type = "html", out = "PSM_POST.html", report=("vc*sp"), single.row = TRUE,
se = se_list, title = "PSM-Regression Results with Clustered Standard Errors")
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
library(stargazer)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("Total.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABCFO<-data$ABCFO*(-1)
data$ABEXP<-data$ABEXP*(-1)
data$RM<-data$ABCFO+data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<-data$ABPROD+data$ABEXP
########### winsorizing 1%
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$ADJROA_sq<-data$ADJROA*data$ADJROA
m<-lm(RM ~ RPA_Ctd * (ABSDA1 + POST)+ LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM ~ RPA_Ctd + (ABSDA1 + POST)+ LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM ~ ABSDA1 * (RPA_Ctd + POST)+ LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
summary(m<-lm(RM ~ ABSDA1 * (RPA_Ctd * POST)+ LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data))
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
library(stargazer)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("Total.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABCFO<-data$ABCFO*(-1)
data$ABEXP<-data$ABEXP*(-1)
data$RM<-data$ABCFO+data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<-data$ABPROD+data$ABEXP
data$IMP<-data$RPA_Ctd*data$POST
########### winsorizing 1%
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$ADJROA_sq<-data$ADJROA*data$ADJROA
summary(m<-lm(RM ~ ABSDA1 + (IMP) + POST + RPA_Ctd+ LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data))
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
library(stargazer)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("Total.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABCFO<-data$ABCFO*(-1)
data$ABEXP<-data$ABEXP*(-1)
data$RM<-data$ABCFO+data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<-data$ABPROD+data$ABEXP
########### winsorizing 1%
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$ADJROA_sq<-data$ADJROA*data$ADJROA
summary(m<-lm(RM ~ ABSDA1 * (Adopt * POST)+ LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data))
summary(step(m<-lm(RM ~ ABSDA1 * (RPA_Ctd * POST)+ LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)))
summary(m<-lm(RM ~ ABSDA1 + (Adopt * POST)+ LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data))
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
library(stargazer)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("Total.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABCFO<-data$ABCFO*(-1)
data$ABEXP<-data$ABEXP*(-1)
data$RM<-data$ABCFO+data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<-data$ABPROD+data$ABEXP
########### winsorizing 1%
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$ADJROA_sq<-data$ADJROA*data$ADJROA
data<-subset(data,data$Adopt==1)
m<-lm(RM~POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year)
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
library(stargazer)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("Total.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABCFO<-data$ABCFO*(-1)
data$ABEXP<-data$ABEXP*(-1)
data$RM<-data$ABCFO+data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<-data$ABPROD+data$ABEXP
########### winsorizing 1%
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$ADJROA_sq<-data$ADJROA*data$ADJROA
m<-lm(RM~POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM~POST * ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year)
m<-lm(RM~POST * ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
data<-subset(data,data$Adopt==1)
m<-lm(RM~POST * ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
summary(lm(RM~POST + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data))
lm(RM~POST * ABSDA1 + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(lm(RM~POST * ABSDA1 + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data))
summary(lm(RM~POST * ABSDA2 + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data))
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
library(stargazer)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("Total.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABCFO<-data$ABCFO*(-1)
data$ABEXP<-data$ABEXP*(-1)
data$RM<-data$ABCFO+data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<-data$ABPROD+data$ABEXP
########### winsorizing 1%
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$ADJROA_sq<-data$ADJROA*data$ADJROA
m<-lm(RM ~ POST ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
m<-lm(RM ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(ABCFO ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(ABEXP ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(ABPROD ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM1 ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM2 ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM ~ POST * ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
data<-subset(data,data$Adopt==1)
m<-lm(RM ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM1 ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM2 ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(ABCFO ~ POST + ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
m<-lm(RM ~ POST * ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM ~ POST + ABSDA1 + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM ~ POST * ABSDA1 + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary()
summary(m)
m<-lm(ABSDA1 ~ POST + RM + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data)
summary(m)
summary(m<-lm(ABSDA1 ~ POST * RM + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data))
summary(m<-lm(RM ~ POST * ABSDA + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ADV+ ESG + Big4 + Year,data=data))
m<-lm(ABSDA1 ~ POST + RM + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ADV + ESG + Big4 + Year,data=data)
data$MVE<-data$Equity*data$MTB
data$MVE<-log(data$MVE)
m<-lm(RM ~ POST * ABSDA1 + LEV + OCF + MTB + ADJROA + ADJROA_sq+ MVE + Age + RD + ADV + ESG + Big4 + Year,data=data)
summary(m)
m<-lm(RM ~ POST + ABSDA1 + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ADV + ESG + Big4 + Year,data=data)
summary(m)
summary(m<-lm(RM ~ POST + ABSDA1 + LEV + OCF + MTB + ADJROA + ADJROA_sq+ LGTA + Age + RD + ESG + Big4 + Year,data=data))
