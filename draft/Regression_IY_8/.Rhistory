p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$RPA<-as.double(data$RPA)-1
data$RPA_Ctd<-as.double(data$RPA_Ctd)-1
###second step mataching
data$ADJROA_sq<-data$ADJROA*data$ADJROA
# Define your Y and X
Y_vars <- c("ABSDA","ABSDA1","ABSDA2","ABCFO","ABPROD","ABEXP","RM","RM1","RM2")
X_vars <- c("ABSDA","ABSDA1","ABSDA2","RM")
ps_models<-list()
models <- list() # To store lm models
se_list <- list() # To store robust SEs for each model
for (Y_var in Y_vars) {
for (X_var in X_vars) {
if (substr(Y_var,1,3)!=substr(X_var,1,3)) {
# 1. Generate propensity scores
ps_model <- glm(as.formula(paste0("RPA_Ctd ~ ", X_var, " + LEV + OCF + MTB + ADJROA  + LGTA + Age + RD + ADV + ESG  + Big4 + Year")), data = data)
# 2. Perform nearest neighbor matching
matched_data <- matchit(as.formula(paste0("RPA_Ctd ~ ", X_var, " + LEV + OCF + MTB + ADJROA    + LGTA + Age  + RD + ADV + ESG  + Big4 + Year")), data = data,link="logit", method = "nearest",distance = "glm")
matched_data <- match.data(matched_data)
# 3. Fit a linear model on the matched data
model_formula <- as.formula(paste0(Y_var, " ~ RPA_Ctd * ", X_var, " + LEV + OCF + MTB + ADJROA  + LGTA + Age  + RD + ADV + ESG  + Big4 + Year "))
model <- lm(model_formula, data = matched_data)
# Calculate clustered standard errors
robust_se <- sqrt(diag(vcovCL(model, type = "HC0", cluster = ~Key)))
# Store the model, its robust SE
models[[paste0(Y_var, "_", X_var)]] <- model
se_list[[paste0(Y_var, "_", X_var)]] <- robust_se
ps_models[[paste0(Y_var, "_", X_var)]]<-ps_model
}
}
}
# Output all models in a single table using stargazer
stargazer::stargazer(models, type = "html", out = "PSM.html",
se = se_list, title = "PSM-Regression Results with Clustered Standard Errors")
library(sandwich)
library(lmtest)
library(MASS)
library(Matching)
library(rgenoud)
library(MatchIt)
library(dplyr)
library(knitr)
library(kableExtra)
# read CSV
data <- read.csv("Total.csv", na.strings = "#N/A")
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$RM<-data$ABCFO-data$ABPROD+data$ABEXP
data$RM1<-data$ABCFO+data$ABEXP
data$RM2<--data$ABPROD+data$ABEXP
######fisrt step######################### winsorizing
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
data$RPA<-as.double(data$RPA)-1
data$RPA_Ctd<-as.double(data$RPA_Ctd)-1
###second step mataching
data$ADJROA_sq<-data$ADJROA*data$ADJROA
# Define your Y and X
Y_vars <- c("ABSDA","ABSDA1","ABSDA2","ABCFO","ABPROD","ABEXP","RM","RM1","RM2")
X_vars <- c("ABSDA","ABSDA1","ABSDA2","RM")
ps_models<-list()
models <- list() # To store lm models
se_list <- list() # To store robust SEs for each model
for (Y_var in Y_vars) {
for (X_var in X_vars) {
if (substr(Y_var,1,3)!=substr(X_var,1,3)) {
# 1. Generate propensity scores
ps_model <- glm(as.formula(paste0("RPA_Ctd ~ ", X_var, " + LEV + OCF + MTB + ADJROA + ADJROA_sq + LGTA + Age + RD + ADV + ESG  + Big4 + Year")), data = data)
# 2. Perform nearest neighbor matching
matched_data <- matchit(as.formula(paste0("RPA_Ctd ~ ", X_var, " + LEV + OCF + MTB + ADJROA  + ADJROA_sq  + LGTA + Age  + RD + ADV + ESG  + Big4 + Year")), data = data,link="logit", method = "nearest",distance = "glm")
matched_data <- match.data(matched_data)
# 3. Fit a linear model on the matched data
model_formula <- as.formula(paste0(Y_var, " ~ RPA_Ctd * ", X_var, " + LEV + OCF + MTB + ADJROA + ADJROA_sq + LGTA + Age  + RD + ADV + ESG  + Big4 + Year "))
model <- lm(model_formula, data = matched_data)
# Calculate clustered standard errors
robust_se <- sqrt(diag(vcovCL(model, type = "HC0", cluster = ~Key)))
# Store the model, its robust SE
models[[paste0(Y_var, "_", X_var)]] <- model
se_list[[paste0(Y_var, "_", X_var)]] <- robust_se
ps_models[[paste0(Y_var, "_", X_var)]]<-ps_model
}
}
}
# Output all models in a single table using stargazer
stargazer::stargazer(models, type = "html", out = "PSM.html",
se = se_list, title = "PSM-Regression Results with Clustered Standard Errors")
library(dplyr)
library(stargazer)
library(gdata)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Assuming 'data' is your dataframe
data$Industry <- as.factor(data$Industry)
data$Year <- as.factor(data$Year)
data<-subset(data,data$YICounts>8)
# Initialize columns in 'data' for the abnormal measures
data$DA <- NA  # Discretionary Accruals for Jones model
data$DA1 <- NA
data$DA2 <- NA
data$ABCFO <- NA  # Abnormal Cash Flow from Operations
data$ABPROD <- NA  # Abnormal Production Costs
data$ABEXP <- NA  # Abnormal Discretionary Expenses
#Jones/MJONES/MJONES_ROA/MJONES_BMCFO
data$AC<-(data$NI_Ctd-data$OCF)/data$Asset_1
data$A1<-1/data$Asset_1
data$A21<-(data$S-data$S_1)/data$Asset_1
data$A2<-(data$S-data$S_1-(data$AR-data$AR_1))/data$Asset_1
data$A3<-data$PPE/data$Asset_1
data$A4<-data$NI_Ctd/data$Asset_1
data$A5<-data$BM
data$A6<-data$OCF/data$Asset_1
data$ROA<-data$NI_Ctd/data$Asset_1
# Assuming your dataframe is named 'data' and it has columns 'ROA', 'Industry', and 'Year'
data <- data %>%
group_by(Industry, Year) %>%
mutate(
Median_ROA = median(ROA, na.rm = TRUE), # Calculate median of ROA for each Industry-Year group
ADJROA = ROA - Median_ROA # Subtract median ROA from ROA for each row
) %>%
ungroup() # Ungroup the data frame
data$CFO<-data$OCF/data$Asset_1
data$PROD<-data$PROD/data$Asset_1
data$EXP<-data$EXP/data$Asset_1
data$R1<-1/data$Asset_1
data$R2<-data$S/data$Asset_1
data$R3<-(data$S-data$S_1)/data$Asset_1
data$R4<-(data$S_1-data$S_2)/data$Asset_1
data$R5<-data$S_1/data$Asset_1
unique_industries <- unique(data$Industry)
all_industries_data <- NULL
# Initialize a list to store results for each model
results_list <- list(
JonesModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
JonesModel1 = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
JonesModel2 = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
CFOModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
PRODModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
EXPModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector())
)
for(industry in unique_industries) {
industry_data <- data %>% filter(Industry == industry)
unique_years <- unique(industry_data$Year)
for(year in unique_years) {
year_data <- industry_data %>% filter(Year == year)
# Jones Model
jones_model <- lm(AC ~ A1 + A21 + A3, data = year_data)
store_model_results(results_list$JonesModel, jones_model)
# Jones Model 1
jones_model1 <- lm(AC ~ A1 + A2 + A3, data = year_data)
store_model_results(results_list$JonesModel1, jones_model1)
# Jones Model 2
jones_model2 <- lm(AC ~ A1 + A2 + A3 + A4, data = year_data)
store_model_results(results_list$JonesModel2, jones_model2)
# CFO Model
model_cfo <- lm(CFO ~ R1 + R2 + R3, data = year_data)
store_model_results(results_list$CFOModel, model_cfo)
# PROD Model
model_prod <- lm(PROD ~ R1 + R2 + R3 + R4, data = year_data)
store_model_results(results_list$PRODModel, model_prod)
# EXP Model
model_exp <- lm(EXP ~ R1 + R5, data = year_data)
store_model_results(results_list$EXPModel, model_exp)
}
}
library(dplyr)
library(stargazer)
library(gdata)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Assuming 'data' is your dataframe
data$Industry <- as.factor(data$Industry)
data$Year <- as.factor(data$Year)
data<-subset(data,data$YICounts>8)
# Initialize columns in 'data' for the abnormal measures
data$DA <- NA  # Discretionary Accruals for Jones model
data$DA1 <- NA
data$DA2 <- NA
data$ABCFO <- NA  # Abnormal Cash Flow from Operations
data$ABPROD <- NA  # Abnormal Production Costs
data$ABEXP <- NA  # Abnormal Discretionary Expenses
#Jones/MJONES/MJONES_ROA/MJONES_BMCFO
data$AC<-(data$NI_Ctd-data$OCF)/data$Asset_1
data$A1<-1/data$Asset_1
data$A21<-(data$S-data$S_1)/data$Asset_1
data$A2<-(data$S-data$S_1-(data$AR-data$AR_1))/data$Asset_1
data$A3<-data$PPE/data$Asset_1
data$A4<-data$NI_Ctd/data$Asset_1
data$A5<-data$BM
data$A6<-data$OCF/data$Asset_1
data$ROA<-data$NI_Ctd/data$Asset_1
# Assuming your dataframe is named 'data' and it has columns 'ROA', 'Industry', and 'Year'
data <- data %>%
group_by(Industry, Year) %>%
mutate(
Median_ROA = median(ROA, na.rm = TRUE), # Calculate median of ROA for each Industry-Year group
ADJROA = ROA - Median_ROA # Subtract median ROA from ROA for each row
) %>%
ungroup() # Ungroup the data frame
data$CFO<-data$OCF/data$Asset_1
data$PROD<-data$PROD/data$Asset_1
data$EXP<-data$EXP/data$Asset_1
data$R1<-1/data$Asset_1
data$R2<-data$S/data$Asset_1
data$R3<-(data$S-data$S_1)/data$Asset_1
data$R4<-(data$S_1-data$S_2)/data$Asset_1
data$R5<-data$S_1/data$Asset_1
unique_industries <- unique(data$Industry)
all_industries_data <- NULL
# Initialize a list to store results for each model
results_list <- list(
JonesModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
JonesModel1 = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
JonesModel2 = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
CFOModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
PRODModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
EXPModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector())
)
# Function to calculate average results for each model
calculate_average_results <- function(model_results) {
mean_coefficients <- sapply(model_results$coefficients, function(x) colMeans(matrix(unlist(x), ncol = length(x), byrow = TRUE), na.rm = TRUE))
mean_se <- sapply(model_results$se, mean, na.rm = TRUE)
mean_adjR2 <- mean(model_results$adjR2, na.rm = TRUE)
mean_n <- mean(model_results$n, na.rm = TRUE)
t_statistics <- mean_coefficients / mean_se
list(mean_coefficients = mean_coefficients, t_statistics = t_statistics, mean_adjR2 = mean_adjR2, mean_n = mean_n)
}
for(industry in unique_industries) {
industry_data <- data %>% filter(Industry == industry)
unique_years <- unique(industry_data$Year)
for(year in unique_years) {
year_data <- industry_data %>% filter(Year == year)
# Jones Model
jones_model <- lm(AC ~ A1 + A21 + A3, data = year_data)
store_model_results(results_list$JonesModel, jones_model)
# Jones Model 1
jones_model1 <- lm(AC ~ A1 + A2 + A3, data = year_data)
store_model_results(results_list$JonesModel1, jones_model1)
# Jones Model 2
jones_model2 <- lm(AC ~ A1 + A2 + A3 + A4, data = year_data)
store_model_results(results_list$JonesModel2, jones_model2)
# CFO Model
model_cfo <- lm(CFO ~ R1 + R2 + R3, data = year_data)
store_model_results(results_list$CFOModel, model_cfo)
# PROD Model
model_prod <- lm(PROD ~ R1 + R2 + R3 + R4, data = year_data)
store_model_results(results_list$PRODModel, model_prod)
# EXP Model
model_exp <- lm(EXP ~ R1 + R5, data = year_data)
store_model_results(results_list$EXPModel, model_exp)
}
}
library(dplyr)
library(stargazer)
library(gdata)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Assuming 'data' is your dataframe
data$Industry <- as.factor(data$Industry)
data$Year <- as.factor(data$Year)
data<-subset(data,data$YICounts>8)
# Initialize columns in 'data' for the abnormal measures
data$DA <- NA  # Discretionary Accruals for Jones model
data$DA1 <- NA
data$DA2 <- NA
data$ABCFO <- NA  # Abnormal Cash Flow from Operations
data$ABPROD <- NA  # Abnormal Production Costs
data$ABEXP <- NA  # Abnormal Discretionary Expenses
#Jones/MJONES/MJONES_ROA/MJONES_BMCFO
data$AC<-(data$NI_Ctd-data$OCF)/data$Asset_1
data$A1<-1/data$Asset_1
data$A21<-(data$S-data$S_1)/data$Asset_1
data$A2<-(data$S-data$S_1-(data$AR-data$AR_1))/data$Asset_1
data$A3<-data$PPE/data$Asset_1
data$A4<-data$NI_Ctd/data$Asset_1
data$A5<-data$BM
data$A6<-data$OCF/data$Asset_1
data$ROA<-data$NI_Ctd/data$Asset_1
# Assuming your dataframe is named 'data' and it has columns 'ROA', 'Industry', and 'Year'
data <- data %>%
group_by(Industry, Year) %>%
mutate(
Median_ROA = median(ROA, na.rm = TRUE), # Calculate median of ROA for each Industry-Year group
ADJROA = ROA - Median_ROA # Subtract median ROA from ROA for each row
) %>%
ungroup() # Ungroup the data frame
data$CFO<-data$OCF/data$Asset_1
data$PROD<-data$PROD/data$Asset_1
data$EXP<-data$EXP/data$Asset_1
data$R1<-1/data$Asset_1
data$R2<-data$S/data$Asset_1
data$R3<-(data$S-data$S_1)/data$Asset_1
data$R4<-(data$S_1-data$S_2)/data$Asset_1
data$R5<-data$S_1/data$Asset_1
unique_industries <- unique(data$Industry)
all_industries_data <- NULL
# Initialize a list to store results for each model
results_list <- list(
JonesModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
JonesModel1 = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
JonesModel2 = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
CFOModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
PRODModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
EXPModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector())
)
# Function to calculate average results for each model
calculate_average_results <- function(model_results) {
mean_coefficients <- sapply(model_results$coefficients, function(x) colMeans(matrix(unlist(x), ncol = length(x), byrow = TRUE), na.rm = TRUE))
mean_se <- sapply(model_results$se, mean, na.rm = TRUE)
mean_adjR2 <- mean(model_results$adjR2, na.rm = TRUE)
mean_n <- mean(model_results$n, na.rm = TRUE)
t_statistics <- mean_coefficients / mean_se
list(mean_coefficients = mean_coefficients, t_statistics = t_statistics, mean_adjR2 = mean_adjR2, mean_n = mean_n)
}
# Function to store model results
store_model_results <- function(model_list, model) {
model_list$coefficients[[length(model_list$coefficients) + 1]] <- coef(model)
model_list$se[[length(model_list$se) + 1]] <- summary(model)$coefficients[, "Std. Error"]
model_list$adjR2 <- c(model_list$adjR2, summary(model)$adj.r.squared)
model_list$n <- c(model_list$n, length(residuals(model)))
}
for(industry in unique_industries) {
industry_data <- data %>% filter(Industry == industry)
unique_years <- unique(industry_data$Year)
for(year in unique_years) {
year_data <- industry_data %>% filter(Year == year)
# Jones Model
jones_model <- lm(AC ~ A1 + A21 + A3, data = year_data)
store_model_results(results_list$JonesModel, jones_model)
# Jones Model 1
jones_model1 <- lm(AC ~ A1 + A2 + A3, data = year_data)
store_model_results(results_list$JonesModel1, jones_model1)
# Jones Model 2
jones_model2 <- lm(AC ~ A1 + A2 + A3 + A4, data = year_data)
store_model_results(results_list$JonesModel2, jones_model2)
# CFO Model
model_cfo <- lm(CFO ~ R1 + R2 + R3, data = year_data)
store_model_results(results_list$CFOModel, model_cfo)
# PROD Model
model_prod <- lm(PROD ~ R1 + R2 + R3 + R4, data = year_data)
store_model_results(results_list$PRODModel, model_prod)
# EXP Model
model_exp <- lm(EXP ~ R1 + R5, data = year_data)
store_model_results(results_list$EXPModel, model_exp)
}
}
# Calculate and print average results for each model
model_names <- names(results_list)
for(model_name in model_names) {
cat("Average Results for", model_name, ":\n")
average_results <- calculate_average_results(results_list[[model_name]])
print(average_results)
cat("\n")
}
library(dplyr)
library(stargazer)
library(gdata)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Assuming 'data' is your dataframe
data$Industry <- as.factor(data$Industry)
data$Year <- as.factor(data$Year)
data<-subset(data,data$YICounts>8)
# Initialize columns in 'data' for the abnormal measures
data$DA <- NA  # Discretionary Accruals for Jones model
data$DA1 <- NA
data$DA2 <- NA
data$ABCFO <- NA  # Abnormal Cash Flow from Operations
data$ABPROD <- NA  # Abnormal Production Costs
data$ABEXP <- NA  # Abnormal Discretionary Expenses
#Jones/MJONES/MJONES_ROA/MJONES_BMCFO
data$AC<-(data$NI_Ctd-data$OCF)/data$Asset_1
data$A1<-1/data$Asset_1
data$A21<-(data$S-data$S_1)/data$Asset_1
data$A2<-(data$S-data$S_1-(data$AR-data$AR_1))/data$Asset_1
data$A3<-data$PPE/data$Asset_1
data$A4<-data$NI_Ctd/data$Asset_1
data$A5<-data$BM
data$A6<-data$OCF/data$Asset_1
data$ROA<-data$NI_Ctd/data$Asset_1
# Assuming your dataframe is named 'data' and it has columns 'ROA', 'Industry', and 'Year'
data <- data %>%
group_by(Industry, Year) %>%
mutate(
Median_ROA = median(ROA, na.rm = TRUE), # Calculate median of ROA for each Industry-Year group
ADJROA = ROA - Median_ROA # Subtract median ROA from ROA for each row
) %>%
ungroup() # Ungroup the data frame
data$CFO<-data$OCF/data$Asset_1
data$PROD<-data$PROD/data$Asset_1
data$EXP<-data$EXP/data$Asset_1
data$R1<-1/data$Asset_1
data$R2<-data$S/data$Asset_1
data$R3<-(data$S-data$S_1)/data$Asset_1
data$R4<-(data$S_1-data$S_2)/data$Asset_1
data$R5<-data$S_1/data$Asset_1
unique_industries <- unique(data$Industry)
all_industries_data <- NULL
# Initialize a list to store results for each model
results_list <- list(
JonesModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
JonesModel1 = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
JonesModel2 = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
CFOModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
PRODModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector()),
EXPModel = list(coefficients = list(), se = list(), adjR2 = vector(), n = vector())
)
# Adjusted function to calculate and print average results for each model
calculate_average_results <- function(model_results) {
# Calculate mean coefficients and standard errors across all regressions
mean_coefficients <- matrix(sapply(model_results$coefficients, mean, na.rm = TRUE), ncol = 1)
mean_se <- sapply(model_results$se, function(se) mean(as.numeric(unlist(se)), na.rm = TRUE))
# Ensure mean_se is properly aligned for t-statistic calculation
t_statistics <- mean_coefficients / mean_se
mean_adjR2 <- mean(model_results$adjR2, na.rm = TRUE)
mean_n <- mean(model_results$n, na.rm = TRUE)
list(mean_coefficients = mean_coefficients, t_statistics = t_statistics, mean_adjR2 = mean_adjR2, mean_n = mean_n)
}
# Adjusted function to store model results
store_model_results <- function(model_list, model) {
model_list$coefficients[[length(model_list$coefficients) + 1]] <- coef(model)
se <- summary(model)$coefficients[, "Std. Error"]
model_list$se[[length(model_list$se) + 1]] <- se
model_list$adjR2 <- c(model_list$adjR2, summary(model)$adj.r.squared)
model_list$n <- c(model_list$n, length(residuals(model)))
}
for(industry in unique_industries) {
industry_data <- data %>% filter(Industry == industry)
unique_years <- unique(industry_data$Year)
for(year in unique_years) {
year_data <- industry_data %>% filter(Year == year)
# Jones Model
jones_model <- lm(AC ~ A1 + A21 + A3, data = year_data)
store_model_results(results_list$JonesModel, jones_model)
# Jones Model 1
jones_model1 <- lm(AC ~ A1 + A2 + A3, data = year_data)
store_model_results(results_list$JonesModel1, jones_model1)
# Jones Model 2
jones_model2 <- lm(AC ~ A1 + A2 + A3 + A4, data = year_data)
store_model_results(results_list$JonesModel2, jones_model2)
# CFO Model
model_cfo <- lm(CFO ~ R1 + R2 + R3, data = year_data)
store_model_results(results_list$CFOModel, model_cfo)
# PROD Model
model_prod <- lm(PROD ~ R1 + R2 + R3 + R4, data = year_data)
store_model_results(results_list$PRODModel, model_prod)
# EXP Model
model_exp <- lm(EXP ~ R1 + R5, data = year_data)
store_model_results(results_list$EXPModel, model_exp)
}
}
# Calculate and print average results for each model
model_names <- names(results_list)
for(model_name in model_names) {
cat("Average Results for", model_name, ":\n")
average_results <- calculate_average_results(results_list[[model_name]])
print(average_results)
cat("\n")
}
