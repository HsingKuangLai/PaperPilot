library(MASS)
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("raw.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$ABSDA)
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("raw.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABSDA3<-abs(data$DA3)
data$RM<-data$ABCFO+data$ABEXP-data$ABPROD
data$RM1<-data$ABCFO+data$ABEXP
########### winsorizing 1%
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
#Jones/MJONES/MJONES_ROA/MJONES_BMCFO
TAC<-data[,c(1,2,3)]
TAC$AC<-(data$NI_Ctd-data$OCF)/data$Asset_1
TAC$A1<-1/data$Asset_1
TAC$A21<-(data$S-data$S_1)/data$Asset_1
TAC$A2<-(data$S-data$S_1-(data$AR-data$AR_1))/data$Asset_1
TAC$A3<-data$PPE/data$Asset_1
TAC$A4<-data$NI_Ctd/data$Asset_1
TAC$A5<-data$BM
TAC$A6<-data$OCF/data$Asset_1
TAC$ROA<-data$NI_Ctd/data$Asset_1
# Assuming your dataframe is named 'data' and it has columns 'ROA', 'Industry', and 'Year'
TAC <- TAC %>%
group_by(Industry, Year) %>%
mutate(
Median_ROA = median(ROA, na.rm = TRUE), # Calculate median of ROA for each Industry-Year group
ADJROA = ROA - Median_ROA # Subtract median ROA from ROA for each row
) %>%
ungroup() # Ungroup the data frame
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
#Jones/MJONES/MJONES_ROA/MJONES_BMCFO
TAC<-data[,c(1,2,3,4,5,6)]
TAC$AC<-(data$NI_Ctd-data$OCF)/data$Asset_1
TAC$A1<-1/data$Asset_1
TAC$A21<-(data$S-data$S_1)/data$Asset_1
TAC$A2<-(data$S-data$S_1-(data$AR-data$AR_1))/data$Asset_1
TAC$A3<-data$PPE/data$Asset_1
TAC$A4<-data$NI_Ctd/data$Asset_1
TAC$A5<-data$BM
TAC$A6<-data$OCF/data$Asset_1
TAC$ROA<-data$NI_Ctd/data$Asset_1
# Assuming your dataframe is named 'data' and it has columns 'ROA', 'Industry', and 'Year'
TAC <- TAC %>%
group_by(Industry, Year) %>%
mutate(
Median_ROA = median(ROA, na.rm = TRUE), # Calculate median of ROA for each Industry-Year group
ADJROA = ROA - Median_ROA # Subtract median ROA from ROA for each row
) %>%
ungroup() # Ungroup the data frame
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("clean.csv")
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
#Jones/MJONES/MJONES_ROA/MJONES_BMCFO
TAC<-data[,c(1,2,3,4,5,6)]
TAC$AC<-(data$NI_Ctd-data$OCF)/data$Asset_1
TAC$A1<-1/data$Asset_1
TAC$A21<-(data$S-data$S_1)/data$Asset_1
TAC$A2<-(data$S-data$S_1-(data$AR-data$AR_1))/data$Asset_1
TAC$A3<-data$PPE/data$Asset_1
TAC$A4<-data$NI_Ctd/data$Asset_1
TAC$A5<-data$BM
TAC$A6<-data$OCF/data$Asset_1
TAC$ROA<-data$NI_Ctd/data$Asset_1
# Assuming your dataframe is named 'data' and it has columns 'ROA', 'Industry', and 'Year'
TAC <- TAC %>%
group_by(Industry, Year) %>%
mutate(
Median_ROA = median(ROA, na.rm = TRUE), # Calculate median of ROA for each Industry-Year group
ADJROA = ROA - Median_ROA # Subtract median ROA from ROA for each row
) %>%
ungroup() # Ungroup the data frame
model<-lm(AC~ A1+A21+A3,data=TAC)
model1<-lm(AC~ A1+A2+A3,data=TAC)
model2<-lm(AC~ A1+A2+A3+A4,data=TAC)
model3<-lm(AC~ A1+A2+A3+A5+A6,data=TAC)
summary(model)
summary(model1)
summary(model2)
summary(model3)
TAC$DA<-residuals(model)
TAC$DA1<-residuals(model1)
TAC$DA2<-residuals(model2)
TAC$DA3<-residuals(model3)
RM<-data[,c(1,2,3)]
RM$CFO<-data$OCF/data$Asset_1
RM$PROD<-data$PROD/data$Asset_1
RM$EXP<-data$EXP/data$Asset_1
RM$A1<-1/data$Asset_1
RM$A2<-data$S/data$Asset_1
RM$A3<-(data$S-data$S_1)/data$Asset_1
RM$A4<-(data$S_1-data$S_2)/data$Asset_1
RM$A5<-data$S_1/data$Asset_1
model1<-lm(CFO~ A1+A2+A3,data=RM)
model2<-lm(PROD~ A1+A2+A3+A4,data=RM)
model3<-lm(EXP~ A1+A5,data=RM)
summary(model1)
summary(model2)
summary(model3)
RM$ABCFO<-residuals(model1)
RM$ABPROD<-residuals(model2)
RM$ABEXP<-residuals(model3)
write.csv(TAC,"TAC_NoWinsorize.csv")
write.csv(RM,"RM_Nowinsorize.csv")
TAC<-TAC[,c("Key","DA","DA1","DA2","DA3","ROA","Median_ROA","ADJROA")]
RM<-RM[,c("Key","ABCFO","ABPROD","ABEXP")]
TACRM<-merge(TAC,RM,by="Key")
rawdata <- read.csv("data.csv")
Total<-merge(rawdata,TACRM,by="Key")
write.csv(Total,"Total.csv")
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("Total.csv")
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("Total.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABSDA3<-abs(data$DA3)
data$RM<-data$ABCFO+data$ABEXP-data$ABPROD
data$RM1<-data$ABCFO+data$ABEXP
########### winsorizing 1%
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
library(sandwich)
library(lmtest)
library(MASS)
library(dplyr)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("Total.csv")
# 移除含有缺失值的觀測值
data$ABSDA<-abs(data$DA)
data$ABSDA1<-abs(data$DA1)
data$ABSDA2<-abs(data$DA2)
data$ABSDA3<-abs(data$DA3)
data$RM<-data$ABCFO+data$ABEXP-data$ABPROD
data$RM1<-data$ABCFO+data$ABEXP
########### winsorizing 1%
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Factorize the first 6 columns
data[1:8] <- lapply(data[1:8], factor)
# Apply the winsorize function to the remaining columns
data <- data %>%
mutate(across(.cols = 9:ncol(data), .fns = ~winsorize(.)))
View(data)
model <- (lm((ABSDA) ~ RPA  + (RM + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year  , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
#sink("Kim_ABS(sq).txt")
model <- (lm((ABSDA1) ~ RPA  + (RM + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year  , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
#Now, perform the Huber regression or any regression analysis using winsorized variables+ Year + Industry
#sink("Kim_ABS(sq).txt")
model <- (lm((ABSDA2) ~ RPA  + (RM + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year  , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
#Now, perform the Huber regression or any regression analysis using winsorized variables+ Year + Industry
#sink("Kim_ABS(sq).txt")
model <- (lm((ABSDA3) ~ RPA  + (RM + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year  , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((ABSDA) ~ RPA  + (RM + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year  , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((ABSDA1) ~ RPA  + (RM + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year  , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
#sink("Kim_ABS(sq).txt")
model <- (lm((ABSDA1) ~ RPA  + (RM + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year + Industry , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
#Now, perform the Huber regression or any regression analysis using winsorized variables+ Year + Industry
#sink("Kim_ABS(sq).txt")
model <- (lm((ABSDA2) ~ RPA  + (RM + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year + Industry , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((ABSDA2) ~ RPA  + (RM + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((ABSDA2) ~ RPA  + (RM1 + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
#Now, perform the Huber regression or any regression analysis using winsorized variables+ Year + Industry
#sink("Kim_ABS(sq).txt")
model <- (lm((ABSDA) ~ RPA  + (RM1 + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((ABSDA1) ~ RPA  + (RM1 + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((ABSDA2) ~ RPA  + (RM1 + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((ABSDA3) ~ RPA  + (RM1 + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((RM) ~ RPA  + (ABSDA + LEV + OCF + MTB  + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year   , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((RM) ~ RPA  + (ABSDA1 + LEV + OCF + MTB  + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year   , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((RM) ~ RPA  + (ABSDA2 + LEV + OCF + MTB  + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year   , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((RM) ~ RPA  + (ABSDA3 + LEV + OCF + MTB  + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year   , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((RM) ~ RPA  + (ABSDA1 + LEV + OCF + MTB  + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year   , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((RM) ~ RPA  + (ABSDA2 + LEV + OCF + MTB  + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year   , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((RM1) ~ RPA  + (ABSDA + LEV + OCF + MTB  + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year   , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((RM1) ~ RPA  + (ABSDA1 + LEV + OCF + MTB  + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year   , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
model <- (lm((RM1) ~ RPA  + (ABSDA2 + LEV + OCF + MTB  + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year   , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
#sink("Kim_ABS(sq).txt")
model <- (lm((ABSDA) ~ RPA  + (RM1 + LEV + OCF + MTB  + ADJROA  + LGTA + Age_Trade + Big4 + RD + ADV + ESG + GC ) + Year , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
#sink("Kim_ABS(sq).txt")
model <- (lm((ABSDA1) ~ RPA  + (RM1 + LEV + OCF + MTB  + ADJROA  + LGTA + Age_Trade + Big4 + RD + ADV + ESG + GC ) + Year , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
#sink("Kim_ABS(sq).txt")
model <- (lm((ABSDA1) ~ RPA  + (RM1 + LEV + OCF + MTB  + ADJROA  + LGTA + Age + Big4 + RD + ADV + ESG + GC ) + Year , data = data))
summary(model)
coeftest(model, vcov = vcovHC(model))
coeftest(model, vcov = vcovCL(model,cluster = ~Key))
library(lmtest)
library(sandwich)
# Define the different values for Y and X
Y_vars <- c("ABSDA", "ABSDA1", "ABSDA2")
X_vars <- c("RM", "RM1")
# Loop over each combination of Y and X
for (Y_var in Y_vars) {
for (X_var in X_vars) {
# Define the model formula
formula <- as.formula(paste0(Y_var, " ~ ", X_var,
" + LEV + OCF + MTB + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC + Year"))
# Fit the model
model <- lm(formula, data = data)
# Print summary
print(paste0("Model: ", Y_var, " ~ ", X_var))
print(summary(model))
# Perform coeftest with vcovHC
print(coeftest(model, vcov = vcovHC(model)))
# Perform coeftest with vcovCL
print(coeftest(model, vcov = vcovCL(model, cluster = ~Key)))
# Optionally, you can save the model results or coefficients into a list or data frame if needed
}
}
#AM
library(lmtest)
library(sandwich)
# Define the different values for Y and X
Y_vars <- c("ABSDA", "ABSDA1", "ABSDA2")
X_vars <- c("RM", "RM1")
# Loop over each combination of Y and X
for (Y_var in Y_vars) {
for (X_var in X_vars) {
# Define the model formula
formula <- as.formula(paste0(Y_var, " ~ ", X_var,
" + RPA +LEV + OCF + MTB + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC + Year"))
# Fit the model
model <- lm(formula, data = data)
# Print summary
print(paste0("Model: ", Y_var, " ~ ", X_var))
print(summary(model))
# Perform coeftest with vcovHC
print(coeftest(model, vcov = vcovHC(model)))
# Perform coeftest with vcovCL
print(coeftest(model, vcov = vcovCL(model, cluster = ~Key)))
# Optionally, you can save the model results or coefficients into a list or data frame if needed
}
}
#AM
library(lmtest)
library(sandwich)
# Define the different values for Y and X
Y_vars <- c("ABSDA", "ABSDA1", "ABSDA2")
X_vars <- c("RM", "RM1")
# Loop over each combination of Y and X
for (Y_var in Y_vars) {
for (X_var in X_vars) {
# Define the model formula
formula <- as.formula(paste0(Y_var, " ~ RPA + ", X_var,
" + LEV + OCF + MTB + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC + Year"))
# Fit the model
model <- lm(formula, data = data)
# Print summary
print(paste0("Model: ", Y_var, " ~ ", X_var))
print(summary(model))
# Perform coeftest with vcovHC
print(coeftest(model, vcov = vcovHC(model)))
# Perform coeftest with vcovCL
print(coeftest(model, vcov = vcovCL(model, cluster = ~Key)))
# Optionally, you can save the model results or coefficients into a list or data frame if needed
}
}
#AM
library(lmtest)
library(sandwich)
# Define the different values for Y and X
Y_vars <- c("ABSDA", "ABSDA1", "ABSDA2")
X_vars <- c("RM", "RM1")
# Loop over each combination of Y and X
for (Y_var in Y_vars) {
for (X_var in X_vars) {
# Define the model formula
formula <- as.formula(paste0(Y_var, " ~ RPA + ", X_var,
" + LEV + OCF + MTB + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + Year"))
# Fit the model
model <- lm(formula, data = data)
# Print summary
print(paste0("Model: ", Y_var, " ~ ", X_var))
print(summary(model))
# Perform coeftest with vcovHC
print(coeftest(model, vcov = vcovHC(model)))
# Perform coeftest with vcovCL
print(coeftest(model, vcov = vcovCL(model, cluster = ~Key)))
# Optionally, you can save the model results or coefficients into a list or data frame if needed
}
}
# RM
# Define the different values for Y and X
X_vars <- c("ABSDA", "ABSDA1", "ABSDA2")
Y_vars <- c("RM", "RM1","ABCFO","ABEXP","ABPROD")
# Loop over each combination of Y and X
for (Y_var in Y_vars) {
for (X_var in X_vars) {
# Define the model formula
formula <- as.formula(paste0(Y_var, " ~ RPA + ", X_var,
" + LEV + OCF + MTB + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC + Year"))
# Fit the model
model <- lm(formula, data = data)
# Print summary
print(paste0("Model: ", Y_var, " ~ ", X_var))
print(summary(model))
# Perform coeftest with vcovHC
print(coeftest(model, vcov = vcovHC(model)))
# Perform coeftest with vcovCL
print(coeftest(model, vcov = vcovCL(model, cluster = ~Key)))
# Optionally, you can save the model results or coefficients into a list or data frame if needed
}
}
#AM
sink("AM.txt")
# Define the different values for Y and X
Y_vars <- c("ABSDA", "ABSDA1", "ABSDA2")
X_vars <- c("RM", "RM1")
# Loop over each combination of Y and X
for (Y_var in Y_vars) {
for (X_var in X_vars) {
# Define the model formula
formula <- as.formula(paste0(Y_var, " ~ RPA + ", X_var,
" + LEV + OCF + MTB + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC + Year"))
# Fit the model
model <- lm(formula, data = data)
# Print summary
print(paste0("Model: ", Y_var, " ~ ", X_var))
print(summary(model))
# Perform coeftest with vcovHC
print(coeftest(model, vcov = vcovHC(model)))
# Perform coeftest with vcovCL
print(coeftest(model, vcov = vcovCL(model, cluster = ~Key)))
# Optionally, you can save the model results or coefficients into a list or data frame if needed
}
}
sink()
# RM
sink("RM.txt")
# Define the different values for Y and X
X_vars <- c("ABSDA", "ABSDA1", "ABSDA2")
Y_vars <- c("RM", "RM1","ABCFO","ABEXP","ABPROD")
# Loop over each combination of Y and X
for (Y_var in Y_vars) {
for (X_var in X_vars) {
# Define the model formula
formula <- as.formula(paste0(Y_var, " ~ RPA + ", X_var,
" + LEV + OCF + MTB + ADJROA + LGTA + Age + Big4 + RD + ADV + ESG + GC + Year"))
# Fit the model
model <- lm(formula, data = data)
# Print summary
print(paste0("Model: ", Y_var, " ~ ", X_var))
print(summary(model))
# Perform coeftest with vcovHC
print(coeftest(model, vcov = vcovHC(model)))
# Perform coeftest with vcovCL
print(coeftest(model, vcov = vcovCL(model, cluster = ~Key)))
# Optionally, you can save the model results or coefficients into a list or data frame if needed
}
}
sink()
