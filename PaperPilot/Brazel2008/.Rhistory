data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$dEPSS<-as.numeric(data$dEPSS)
data$EPSS<-as.numeric(data$EPSS)
data$Annret<-as.numeric(data$Annret)
data <- na.omit(data)
#data <- subset(data, data$Finance == 0)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$Annret<-winsorize(data$Annret)
data$EPSS<-winsorize(data$EPSS)
data$dEPSS<-winsorize(data$dEPSS)
#1 Remove BVE and LN(MVE)
#2 Remain,
#Now, perform the Huber regression or any regression analysis using winsorized variables)/abs(Annret)*log(abs(Annret))
model <- (lm((Annret) ~  RPA + ( EPSS  + dEPSS ) + Year + Industry   , data = data, fast.s.large.n = Inf))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$dEPSS<-as.numeric(data$dEPSS)
data$EPSS<-as.numeric(data$EPSS)
data$Annret<-as.numeric(data$Annret)
data <- na.omit(data)
data <- subset(data, data$Finance == 0)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$Annret<-winsorize(data$Annret)
data$EPSS<-winsorize(data$EPSS)
data$dEPSS<-winsorize(data$dEPSS)
#1 Remove BVE and LN(MVE)
#2 Remain,
#Now, perform the Huber regression or any regression analysis using winsorized variables)/abs(Annret)*log(abs(Annret))
model <- (lm((Annret) ~  RPA + ( EPSS  + dEPSS ) + Year + Industry   , data = data, fast.s.large.n = Inf))
summary(model)
setwd("C:/Users/financerpa/Desktop/PaperPilot/PaperPilot/Brazel2008")
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA_Ctd <- factor(data$RPA_Ctd)
data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$DA<-winsorize(data$DA)
data$ABSDA<-winsorize(data$ABSDA)
data$LGTA<-winsorize(data$LGTA)
data$LEV<-winsorize(data$LEV)
data$OCF<-winsorize(data$OCF)
data$MTB<-winsorize(data$MTB)
data$RPA_Count<-winsorize(data$RPA_Count)
#1 Remove BVE and LN(MVE)
#2 Remain,
#Now, perform the Huber regression or any regression analysis using winsorized variables+ Year + Industry
model <- (lm( (ABSDA) ~ RPA + ( LGTA + LEV + OCF + MTB ) + Year  , data = data))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA_Ctd <- factor(data$RPA_Ctd)
data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lm( DA ~ RPA + LGTA + LEV + OCF + MTB + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA_Ctd <- factor(data$RPA_Ctd)
data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
# Split the data table based on the condition (Price > 0)
group1 <- data
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lm( DA ~ RPA + LGTA + LEV + OCF + MTB + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~  Year + Industry , data = group1, family=binomial("logit"))
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit(RPA ~  Industry + Year , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year  , data = group1))
summary(model)
library(MatchIt)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year , data = group1, family=binomial("logit"))
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit(ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year , data = group1, method = "nearest",distance = "glm")
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year , data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit(ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year , data = group1, method = "nearest",distance = "glm")
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Year , data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Year , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Year + Industry, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Year + Industry , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year  , data = group1))
summary(model)
library(robustbase)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Year + Industry, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Year + Industry , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lmrob( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Year + Industry, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Year + Industry , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lmrob( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year  , data = group1, method="SM"))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Year + Industry, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Year + Industry , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lmrob( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year  , data = group1, method="MM"))
summary(model)
library(MASS, lib.loc = "C:/Program Files/R/R-4.3.2/library")
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Year + Industry, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Year + Industry , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Year  , data = group1, method="MM"))
summary(model)
