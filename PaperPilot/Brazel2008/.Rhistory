# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$ABSDA > 0)
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + GC + Big4 + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + GC + Big4 + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Big4 + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
#group1 <- subset(data, data$ABSDA > 0)
group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + GC + Big4 + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + GC + Big4 + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Big4 + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
#group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + GC + Big4 + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + GC + Big4 + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + Big4 + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
group1 <- subset(data, data$DA > 0)
#group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Big4 + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Big4 + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + ESG + Big4 + Year  , data = group1))
summary(model)
##
library(MASS)
library(lmtest)
library(sandwich)
coeftest(model, vcov = vcovHC(model, type="HC3"))
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
#group1 <- subset(data, data$DA > 0)
group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Big4 + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Big4 + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + ESG + Big4 + Year  , data = group1))
summary(model)
##
library(MASS)
library(lmtest)
library(sandwich)
coeftest(model, vcov = vcovHC(model, type="HC3"))
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
#group1 <- subset(data, data$DA > 0)
group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Big4 + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Big4 + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + ESG + GC + Big4 + Year  , data = group1))
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
#group1 <- subset(data, data$DA > 0)
group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Big4 + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Big4 + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + ESG + Big4 + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
#group1 <- subset(data, data$DA > 0)
group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Big4 + GC + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Big4 + GC + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) + LGTA + LEV + OCF + MTB + ESG + Big4 + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
#group1 <- subset(data, data$DA > 0)
group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Big4 + GC + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Big4 + GC + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (rlm( ABSDA ~ factor(RPA) *(LGTA + LEV + OCF + MTB + ESG + Big4 ) + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
#group1 <- subset(data, data$DA > 0)
group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Big4 + GC + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Big4 + GC + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lm( ABSDA ~ factor(RPA) *(LGTA + LEV + OCF + MTB + ESG + Big4 ) + Year  , data = group1))
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
#data$RPA <- factor(data$RPA)
data$Big4 <- factor(data$Big4)
data$GC <- factor(data$GC)
data$Industry <- factor(data$Industry)
#data$Year <- factor(data$Year)
data$Finance <- factor(data$Finance)
data$ABSDA<-as.numeric(data$ABSDA)
data$OCF<-as.numeric(data$OCF)
data <- na.omit(data)
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
library(MatchIt)
# Split the data table based on the condition (Price > 0)
#group1 <- subset(data, data$DA > 0)
group1<-data
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~   LGTA + LEV + OCF + MTB + Big4 + GC + ESG + Year, data = group1)
summary(ps_model)
# 提取傾向分數
group1$propensity_score <- predict(ps_model)
# 執行傾向分數匹配
matched_data <- matchit( RPA ~ LGTA + LEV + OCF + MTB + Big4 + GC + ESG + Year  , data = group1, method = "nearest",distance = "glm")
# 從匹配物件中提取匹配後的資料框架
group1 <- match.data(matched_data)
group1$DA<-winsorize(group1$DA)
group1$ABSDA<-winsorize(group1$ABSDA)
group1$LGTA<-winsorize(group1$LGTA)
group1$LEV<-winsorize(group1$LEV)
group1$OCF<-winsorize(group1$OCF)
group1$MTB<-winsorize(group1$MTB)
group1$ESG<-winsorize(group1$ESG)
group1$RPA_Count<-winsorize(group1$RPA_Count)
###
model <- (lm( ABSDA ~ factor(RPA) + (LGTA + LEV + OCF + MTB + ESG + Big4 ) + Year  , data = group1))
summary(model)
