# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-data$TA/data$Equity
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~ EARNBV + Year + Industry +size , data = data)
# 提取傾向分數
data$propensity_score <- predict(ps_model, type = "response")
# 執行傾向分數匹配
matched_data <- matchit(RPA ~ EARNBV + Year + Industry + size  , data = data, method = "nearest")
# 從匹配物件中提取匹配後的資料框架
data_PSM <- match.data(matched_data)
# Winsorize each continuous variable
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data_PSM$MBV<-winsorize(data_PSM$MBV)
data_PSM$EARNBV<-winsorize(data_PSM$EARNBV)
data_PSM$RPA <- factor(data_PSM$RPA)
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + size + Industry + RPA, data = data_PSM)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-data$TA/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~ EARNBV + Year + Industry +size , data = data)
# 提取傾向分數
data$propensity_score <- predict(ps_model, type = "response")
# 執行傾向分數匹配
matched_data <- matchit(RPA ~ EARNBV + Year + Industry + size  , data = data, method = "nearest")
# 從匹配物件中提取匹配後的資料框架
data_PSM <- match.data(matched_data)
# Winsorize each continuous variable
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data_PSM$MBV<-winsorize(data_PSM$MBV)
data_PSM$EARNBV<-winsorize(data_PSM$EARNBV)
data_PSM$RPA <- factor(data_PSM$RPA)
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + size + Industry + RPA, data = data_PSM)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA+ Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.001)  # 1st percentile value
p99 <- quantile(x, probs = 0.999)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA+ Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA+ Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.05)  # 1st percentile value
p99 <- quantile(x, probs = 0.95)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA+ Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA+ Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA_Count + Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA_Count + RPA_Count_sq + Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA + Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
#data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA * Finance + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
#data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA + Finance + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
#data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA + Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV + Year + RPA + Industry + size, data = data)
summary(model)
# 將結果儲存到文字檔案
summary_text <- capture.output(summary(model))
sink("Krishan_Size.txt")
cat(summary_text, sep = "\n")
sink()
setwd("C:/Users/financerpa/Desktop/PaperPilot/PaperPilot/Krishnan2000")
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
#data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV * RPA + Year + Industry + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$RPA <- factor(data$RPA)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-log(data$TA)/data$Equity
#data <- subset(data, !(grepl("^M28|^M3000", Industry)))
############################### winsorizing 1% greater (But equal to dummy)
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data$MBV<-winsorize(data$MBV)
data$EARNBV<-winsorize(data$EARNBV)
data$size<-winsorize(data$size)
data$RPA_Count_sq<-data$RPA_Count*data$RPA_Count
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV * RPA + Year + Finance + size, data = data)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-data$TA/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~ EARNBV + Year + Industry +size , data = data)
# 提取傾向分數
data$propensity_score <- predict(ps_model, type = "response")
# 執行傾向分數匹配
matched_data <- matchit(RPA ~ EARNBV + Year + Industry + size  , data = data, method = "nearest")
library(MatchIt)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-data$TA/data$Equity
data <- subset(data, !(grepl("^M28|^M3000", Industry)))
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~ EARNBV + Year + Industry +size , data = data)
# 提取傾向分數
data$propensity_score <- predict(ps_model, type = "response")
# 執行傾向分數匹配
matched_data <- matchit(RPA ~ EARNBV + Year + Industry + size  , data = data, method = "nearest")
# 從匹配物件中提取匹配後的資料框架
data_PSM <- match.data(matched_data)
# Winsorize each continuous variable
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data_PSM$MBV<-winsorize(data_PSM$MBV)
data_PSM$EARNBV<-winsorize(data_PSM$EARNBV)
data_PSM$RPA <- factor(data_PSM$RPA)
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV * RPA + Year + size + Industry  , data = data_PSM)
summary(model)
# 讀取 CSV 檔案，將 "#N/A" 轉換為真正的 NA（缺失值）
data <- read.csv("data.csv", na.strings = "#N/A")
# 移除含有缺失值的觀測值
data <- na.omit(data)
data$Year <- factor(data$Year)
data$Industry <- factor(data$Industry)
data$Finance <- factor(data$Finance)
data$size<-data$TA/data$Equity
# 假設你的資料框架名為 data
ps_model <- glm(RPA ~ EARNBV + Year + Industry +size , data = data)
# 提取傾向分數
data$propensity_score <- predict(ps_model, type = "response")
# 執行傾向分數匹配
matched_data <- matchit(RPA ~ EARNBV + Year + Industry + size  , data = data, method = "nearest")
# 從匹配物件中提取匹配後的資料框架
data_PSM <- match.data(matched_data)
# Winsorize each continuous variable
# Define a function for winsorizing
winsorize <- function(x) {
p1 <- quantile(x, probs = 0.01)  # 1st percentile value
p99 <- quantile(x, probs = 0.99)  # 99th percentile value
x[x < p1] <- p1  # Replace values below 1st percentile
x[x > p99] <- p99  # Replace values above 99th percentile
return(x)
}
data_PSM$MBV<-winsorize(data_PSM$MBV)
data_PSM$EARNBV<-winsorize(data_PSM$EARNBV)
data_PSM$RPA <- factor(data_PSM$RPA)
# Now, perform the Huber regression or any regression analysis using winsorized variables
model <- lm(MBV ~ EARNBV * RPA + Year + size + Industry  , data = data_PSM)
summary(model)
